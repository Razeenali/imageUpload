{"ast":null,"code":"// src/notifyManager.ts\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n  let notifyFn = callback => {\n    callback();\n  };\n  let batchNotifyFn = callback => {\n    callback();\n  };\n  let scheduleFn = cb => setTimeout(cb, 0);\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  return {\n    batch: callback => {\n      let result;\n      transactions++;\n      try {\n        result = callback();\n      } finally {\n        transactions--;\n        if (!transactions) {\n          flush();\n        }\n      }\n      return result;\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: callback => {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        schedule(() => {\n          callback(...args);\n        });\n      };\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: fn => {\n      notifyFn = fn;\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: fn => {\n      batchNotifyFn = fn;\n    },\n    setScheduler: fn => {\n      scheduleFn = fn;\n    }\n  };\n}\nvar notifyManager = createNotifyManager();\nexport { createNotifyManager, notifyManager };","map":{"version":3,"mappings":";AAYO,SAASA,sBAAsB;EACpC,IAAIC,QAA+B,EAAC;EACpC,IAAIC,eAAe;EACnB,IAAIC,WAA4BC,YAAa;IAC3CA,UAAS;EACX;EACA,IAAIC,gBAAsCD,YAAyB;IACjEA,UAAS;EACX;EACA,IAAIE,aAAgCC,MAAOC,WAAWD,IAAI,CAAC;EAE3D,MAAME,WAAYL,YAAmC;IACnD,IAAIF,cAAc;MAChBD,MAAMS,KAAKN,QAAQ;IACrB,OAAO;MACLE,WAAW,MAAM;QACfH,SAASC,QAAQ;MACnB,CAAC;IACH;EACF;EACA,MAAMO,QAAQ,MAAY;IACxB,MAAMC,gBAAgBX;IACtBA,QAAQ,EAAC;IACT,IAAIW,cAAcC,QAAQ;MACxBP,WAAW,MAAM;QACfD,cAAc,MAAM;UAClBO,cAAcE,QAASV,YAAa;YAClCD,SAASC,QAAQ;UACnB,CAAC;QACH,CAAC;MACH,CAAC;IACH;EACF;EAEA,OAAO;IACLW,OAAWX,YAAyB;MAClC,IAAIY;MACJd;MACA,IAAI;QACFc,SAASZ,UAAS;MACpB,UAAE;QACAF;QACA,IAAI,CAACA,cAAc;UACjBS,OAAM;QACR;MACF;MACA,OAAOK;IACT;IAAA;AAAA;AAAA;IAIAC,YACEb,YAC0B;MAC1B,OAAO,YAAa;QAAA,kCAATc;UAAAA;QAAA;QACTT,SAAS,MAAM;UACbL,SAAS,GAAGc,IAAI;QAClB,CAAC;MACH;IACF;IACAT;IAAA;AAAA;AAAA;AAAA;IAKAU,mBAAoBC,MAAuB;MACzCjB,WAAWiB;IACb;IAAA;AAAA;AAAA;AAAA;IAKAC,wBAAyBD,MAA4B;MACnDf,gBAAgBe;IAClB;IACAE,cAAeF,MAAyB;MACtCd,aAAac;IACf;EACF;AACF;AAGO,IAAMG,gBAAgBvB,qBAAoB","names":["createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","scheduleFn","cb","setTimeout","schedule","push","flush","originalQueue","length","forEach","batch","result","batchCalls","args","setNotifyFunction","fn","setBatchNotifyFunction","setScheduler","notifyManager"],"sources":["C:\\Users\\Razeen Ali\\499_capstone\\imageUpload\\react-node-s3-image-upload\\frontend\\node_modules\\@tanstack\\query-core\\src\\notifyManager.ts"],"sourcesContent":["// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  return {\n    batch: <T>(callback: () => T): T => {\n      let result\n      transactions++\n      try {\n        result = callback()\n      } finally {\n        transactions--\n        if (!transactions) {\n          flush()\n        }\n      }\n      return result\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: <T extends Array<unknown>>(\n      callback: BatchCallsCallback<T>,\n    ): BatchCallsCallback<T> => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args)\n        })\n      }\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn: NotifyFunction) => {\n      notifyFn = fn\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn: BatchNotifyFunction) => {\n      batchNotifyFn = fn\n    },\n    setScheduler: (fn: ScheduleFunction) => {\n      scheduleFn = fn\n    },\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n"]},"metadata":{},"sourceType":"module"}