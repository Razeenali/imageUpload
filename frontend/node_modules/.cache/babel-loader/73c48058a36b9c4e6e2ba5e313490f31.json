{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Razeen Ali\\\\499_capstone\\\\imageUpload\\\\react-node-s3-image-upload\\\\frontend\\\\src\\\\components\\\\Posts.js\",\n  _s = $RefreshSig$();\nimport { Box, Button, CircularProgress, Image, Input, SimpleGrid, Text } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport useMutation from '../hooks/useMutation';\nimport useQuery from '../hooks/useQuery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiURL = \"http://localhost:4000/images\";\nconst validFileTypes = ['image/jpg', 'image/jpeg', 'image/png'];\nconst URL = '/images';\nconst ErrorText = _ref => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Text, {\n    fontSize: \"lg\",\n    color: \"red.300\",\n    ...props,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n};\n_c = ErrorText;\nconst Posts = () => {\n  _s();\n  const [refetch, setRefetch] = useState(0);\n  const {\n    mutate: uploadImage,\n    isLoading: uploading,\n    error: uploadError\n  } = useMutation({\n    url: URL\n  });\n  const {\n    data: imageUrls = [],\n    isLoading: imagesLoading,\n    error: fetchError\n  } = useQuery(URL, refetch);\n  const [error, setError] = useState('');\n  const handleUpload = async e => {\n    const file = e.target.files[0];\n    if (!validFileTypes.find(type => type === file.type)) {\n      setError('File must be in JPG/PNG format');\n      return;\n    }\n    const form = new FormData();\n    form.append('image', file);\n    await uploadImage(form);\n    setTimeout(() => {\n      setRefetch(s => s + 1);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 6,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      id: \"imageInput\",\n      type: \"file\",\n      hidden: true,\n      onChange: handleUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      as: \"label\",\n      htmlFor: \"imageInput\",\n      colorScheme: \"blue\",\n      variant: \"outline\",\n      mb: 4,\n      cursor: \"pointer\",\n      isLoading: uploading,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorText, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this), uploadError && /*#__PURE__*/_jsxDEV(ErrorText, {\n      children: uploadError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      textAlign: \"left\",\n      mb: 4,\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), imagesLoading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n      color: \"gray.600\",\n      trackColor: \"blue.300\",\n      size: 7,\n      thickness: 10,\n      isIndeterminate: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), fetchError && /*#__PURE__*/_jsxDEV(ErrorText, {\n      textAlign: \"left\",\n      children: \"Failed to load images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), !fetchError && (imageUrls === null || imageUrls === void 0 ? void 0 : imageUrls.length) === 0 && /*#__PURE__*/_jsxDEV(Text, {\n      textAlign: \"left\",\n      fontSize: \"lg\",\n      color: \"gray.500\",\n      children: \"No images found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: [1, 2, 3],\n      spacing: 4,\n      children: (imageUrls === null || imageUrls === void 0 ? void 0 : imageUrls.length) > 0 && imageUrls.map(url => /*#__PURE__*/_jsxDEV(Image, {\n        borderRadius: 5,\n        src: url,\n        alt: \"Image\"\n      }, url, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"PHCTPADdy9h18grfCNHKqXwwMqM=\", false, function () {\n  return [useMutation, useQuery];\n});\n_c2 = Posts;\nexport default Posts;\nvar _c, _c2;\n$RefreshReg$(_c, \"ErrorText\");\n$RefreshReg$(_c2, \"Posts\");","map":{"version":3,"names":["Box","Button","CircularProgress","Image","Input","SimpleGrid","Text","useState","useMutation","useQuery","apiURL","validFileTypes","URL","ErrorText","children","props","Posts","refetch","setRefetch","mutate","uploadImage","isLoading","uploading","error","uploadError","url","data","imageUrls","imagesLoading","fetchError","setError","handleUpload","e","file","target","files","find","type","form","FormData","append","setTimeout","s","length","map"],"sources":["C:/Users/Razeen Ali/499_capstone/imageUpload/react-node-s3-image-upload/frontend/src/components/Posts.js"],"sourcesContent":["import {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  Image,\r\n  Input,\r\n  SimpleGrid,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport { useState } from 'react';\r\nimport useMutation from '../hooks/useMutation';\r\nimport useQuery from '../hooks/useQuery';\r\n\r\nconst apiURL = \"http://localhost:4000/images\";\r\n\r\nconst validFileTypes = ['image/jpg', 'image/jpeg', 'image/png'];\r\nconst URL = '/images';\r\n\r\nconst ErrorText = ({ children, ...props }) => (\r\n  <Text fontSize=\"lg\" color=\"red.300\" {...props}>\r\n    {children}\r\n  </Text>\r\n);\r\n\r\nconst Posts = () => {\r\n  const [refetch, setRefetch] = useState(0);\r\n  const {\r\n    mutate: uploadImage,\r\n    isLoading: uploading,\r\n    error: uploadError,\r\n  } = useMutation({ url: URL });\r\n\r\n  const {\r\n    data: imageUrls = [],\r\n    isLoading: imagesLoading,\r\n    error: fetchError,\r\n  } = useQuery(URL, refetch);\r\n\r\n  const [error, setError] = useState('');\r\n\r\n  const handleUpload = async e => {\r\n    const file = e.target.files[0];\r\n\r\n    if (!validFileTypes.find(type => type === file.type)) {\r\n      setError('File must be in JPG/PNG format');\r\n      return;\r\n    }\r\n\r\n    const form = new FormData();\r\n    form.append('image', file);\r\n\r\n    await uploadImage(form);\r\n    setTimeout(() => {\r\n      setRefetch(s => s + 1);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <Box mt={6}>\r\n      <Input id=\"imageInput\" type=\"file\" hidden onChange={handleUpload} />\r\n      <Button\r\n        as=\"label\"\r\n        htmlFor=\"imageInput\"\r\n        colorScheme=\"blue\"\r\n        variant=\"outline\"\r\n        mb={4}\r\n        cursor=\"pointer\"\r\n        isLoading={uploading}\r\n      >\r\n        Upload\r\n      </Button>\r\n      {error && <ErrorText>{error}</ErrorText>}\r\n      {uploadError && <ErrorText>{uploadError}</ErrorText>}\r\n\r\n      <Text textAlign=\"left\" mb={4}>\r\n        Posts\r\n      </Text>\r\n      {imagesLoading && (\r\n        <CircularProgress\r\n          color=\"gray.600\"\r\n          trackColor=\"blue.300\"\r\n          size={7}\r\n          thickness={10}\r\n          isIndeterminate\r\n        />\r\n      )}\r\n      {fetchError && (\r\n        <ErrorText textAlign=\"left\">Failed to load images</ErrorText>\r\n      )}\r\n      {!fetchError && imageUrls?.length === 0 && (\r\n        <Text textAlign=\"left\" fontSize=\"lg\" color=\"gray.500\">\r\n          No images found\r\n        </Text>\r\n      )}\r\n\r\n      <SimpleGrid columns={[1, 2, 3]} spacing={4}>\r\n        {imageUrls?.length > 0 &&\r\n          imageUrls.map(url => (\r\n            <Image borderRadius={5} src={url} alt=\"Image\" key={url} />\r\n          ))}\r\n      </SimpleGrid>\r\n    </Box>\r\n  );\r\n};\r\nexport default Posts;"],"mappings":"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"},"metadata":{},"sourceType":"module"}