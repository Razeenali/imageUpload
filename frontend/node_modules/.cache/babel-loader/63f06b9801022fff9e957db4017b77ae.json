{"ast":null,"code":"// src/infiniteQueryBehavior.ts\nimport { addToEnd, addToStart, ensureQueryFn } from \"./utils.js\";\nfunction infiniteQueryBehavior(pages) {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options;\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction;\n      const oldPages = context.state.data?.pages || [];\n      const oldPageParams = context.state.data?.pageParams || [];\n      let result = {\n        pages: [],\n        pageParams: []\n      };\n      let currentPage = 0;\n      const fetchFn = async () => {\n        let cancelled = false;\n        const addSignalProperty = object => {\n          Object.defineProperty(object, \"signal\", {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true;\n              } else {\n                context.signal.addEventListener(\"abort\", () => {\n                  cancelled = true;\n                });\n              }\n              return context.signal;\n            }\n          });\n        };\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions);\n        const fetchPage = async (data, param, previous) => {\n          if (cancelled) {\n            return Promise.reject();\n          }\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data);\n          }\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? \"backward\" : \"forward\",\n            meta: context.options.meta\n          };\n          addSignalProperty(queryFnContext);\n          const page = await queryFn(queryFnContext);\n          const {\n            maxPages\n          } = context.options;\n          const addTo = previous ? addToStart : addToEnd;\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages)\n          };\n        };\n        if (direction && oldPages.length) {\n          const previous = direction === \"backward\";\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams\n          };\n          const param = pageParamFn(options, oldData);\n          result = await fetchPage(oldData, param, previous);\n        } else {\n          const remainingPages = pages ?? oldPages.length;\n          do {\n            const param = currentPage === 0 ? oldPageParams[0] ?? options.initialPageParam : getNextPageParam(options, result);\n            if (currentPage > 0 && param == null) {\n              break;\n            }\n            result = await fetchPage(result, param);\n            currentPage++;\n          } while (currentPage < remainingPages);\n        }\n        return result;\n      };\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(fetchFn, {\n            queryKey: context.queryKey,\n            meta: context.options.meta,\n            signal: context.signal\n          }, query);\n        };\n      } else {\n        context.fetchFn = fetchFn;\n      }\n    }\n  };\n}\nfunction getNextPageParam(options, _ref) {\n  let {\n    pages,\n    pageParams\n  } = _ref;\n  const lastIndex = pages.length - 1;\n  return pages.length > 0 ? options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams) : void 0;\n}\nfunction getPreviousPageParam(options, _ref2) {\n  let {\n    pages,\n    pageParams\n  } = _ref2;\n  return pages.length > 0 ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams) : void 0;\n}\nfunction hasNextPage(options, data) {\n  if (!data) return false;\n  return getNextPageParam(options, data) != null;\n}\nfunction hasPreviousPage(options, data) {\n  if (!data || !options.getPreviousPageParam) return false;\n  return getPreviousPageParam(options, data) != null;\n}\nexport { hasNextPage, hasPreviousPage, infiniteQueryBehavior };","map":{"version":3,"mappings":"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","names":["addToEnd","addToStart","ensureQueryFn","infiniteQueryBehavior","pages","onFetch","context","query","options","direction","fetchOptions","meta","fetchMore","oldPages","state","data","oldPageParams","pageParams","result","currentPage","fetchFn","cancelled","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","aborted","addEventListener","queryFn","fetchPage","param","previous","Promise","reject","length","resolve","queryFnContext","queryKey","pageParam","page","maxPages","addTo","pageParamFn","getPreviousPageParam","getNextPageParam","oldData","remainingPages","initialPageParam","persister","lastIndex","hasNextPage","hasPreviousPage"],"sources":["C:\\Users\\Razeen Ali\\499_capstone\\imageUpload\\react-node-s3-image-upload\\frontend\\node_modules\\@tanstack\\query-core\\src\\infiniteQueryBehavior.ts"],"sourcesContent":["import { addToEnd, addToStart, ensureQueryFn } from './utils'\nimport type { QueryBehavior } from './query'\nimport type {\n  InfiniteData,\n  InfiniteQueryPageParamsOptions,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n} from './types'\n\nexport function infiniteQueryBehavior<TQueryFnData, TError, TData, TPageParam>(\n  pages?: number,\n): QueryBehavior<TQueryFnData, TError, InfiniteData<TData, TPageParam>> {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options as InfiniteQueryPageParamsOptions<TData>\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction\n      const oldPages = context.state.data?.pages || []\n      const oldPageParams = context.state.data?.pageParams || []\n      let result: InfiniteData<unknown> = { pages: [], pageParams: [] }\n      let currentPage = 0\n\n      const fetchFn = async () => {\n        let cancelled = false\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true\n              } else {\n                context.signal.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions)\n\n        // Create function to fetch a page\n        const fetchPage = async (\n          data: InfiniteData<unknown>,\n          param: unknown,\n          previous?: boolean,\n        ): Promise<InfiniteData<unknown>> => {\n          if (cancelled) {\n            return Promise.reject()\n          }\n\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data)\n          }\n\n          const queryFnContext: OmitKeyof<\n            QueryFunctionContext<QueryKey, unknown>,\n            'signal'\n          > = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? 'backward' : 'forward',\n            meta: context.options.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const page = await queryFn(\n            queryFnContext as QueryFunctionContext<QueryKey, unknown>,\n          )\n\n          const { maxPages } = context.options\n          const addTo = previous ? addToStart : addToEnd\n\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages),\n          }\n        }\n\n        // fetch next / previous page?\n        if (direction && oldPages.length) {\n          const previous = direction === 'backward'\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams,\n          }\n          const param = pageParamFn(options, oldData)\n\n          result = await fetchPage(oldData, param, previous)\n        } else {\n          const remainingPages = pages ?? oldPages.length\n\n          // Fetch all pages\n          do {\n            const param =\n              currentPage === 0\n                ? (oldPageParams[0] ?? options.initialPageParam)\n                : getNextPageParam(options, result)\n            if (currentPage > 0 && param == null) {\n              break\n            }\n            result = await fetchPage(result, param)\n            currentPage++\n          } while (currentPage < remainingPages)\n        }\n\n        return result\n      }\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn as any,\n            {\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal,\n            },\n            query,\n          )\n        }\n      } else {\n        context.fetchFn = fetchFn\n      }\n    },\n  }\n}\n\nfunction getNextPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  const lastIndex = pages.length - 1\n  return pages.length > 0\n    ? options.getNextPageParam(\n        pages[lastIndex],\n        pages,\n        pageParams[lastIndex],\n        pageParams,\n      )\n    : undefined\n}\n\nfunction getPreviousPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  return pages.length > 0\n    ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams)\n    : undefined\n}\n\n/**\n * Checks if there is a next page.\n */\nexport function hasNextPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data) return false\n  return getNextPageParam(options, data) != null\n}\n\n/**\n * Checks if there is a previous page.\n */\nexport function hasPreviousPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data || !options.getPreviousPageParam) return false\n  return getPreviousPageParam(options, data) != null\n}\n"]},"metadata":{},"sourceType":"module"}