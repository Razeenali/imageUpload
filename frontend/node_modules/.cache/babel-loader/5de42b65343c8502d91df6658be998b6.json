{"ast":null,"code":"// src/mutationCache.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Mutation } from \"./mutation.js\";\nimport { matchMutation, noop } from \"./utils.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar MutationCache = class extends Subscribable {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.config = config;\n    this.#mutations = /* @__PURE__ */new Map();\n    this.#mutationId = Date.now();\n  }\n  #mutations;\n  #mutationId;\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state\n    });\n    this.add(mutation);\n    return mutation;\n  }\n  add(mutation) {\n    const scope = scopeFor(mutation);\n    const mutations = this.#mutations.get(scope) ?? [];\n    mutations.push(mutation);\n    this.#mutations.set(scope, mutations);\n    this.notify({\n      type: \"added\",\n      mutation\n    });\n  }\n  remove(mutation) {\n    const scope = scopeFor(mutation);\n    if (this.#mutations.has(scope)) {\n      const mutations = this.#mutations.get(scope)?.filter(x => x !== mutation);\n      if (mutations) {\n        if (mutations.length === 0) {\n          this.#mutations.delete(scope);\n        } else {\n          this.#mutations.set(scope, mutations);\n        }\n      }\n    }\n    this.notify({\n      type: \"removed\",\n      mutation\n    });\n  }\n  canRun(mutation) {\n    const firstPendingMutation = this.#mutations.get(scopeFor(mutation))?.find(m => m.state.status === \"pending\");\n    return !firstPendingMutation || firstPendingMutation === mutation;\n  }\n  runNext(mutation) {\n    const foundMutation = this.#mutations.get(scopeFor(mutation))?.find(m => m !== mutation && m.state.isPaused);\n    return foundMutation?.continue() ?? Promise.resolve();\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.getAll().forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n  getAll() {\n    return [...this.#mutations.values()].flat();\n  }\n  find(filters) {\n    const defaultedFilters = {\n      exact: true,\n      ...filters\n    };\n    return this.getAll().find(mutation => matchMutation(defaultedFilters, mutation));\n  }\n  findAll() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.getAll().filter(mutation => matchMutation(filters, mutation));\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n  resumePausedMutations() {\n    const pausedMutations = this.getAll().filter(x => x.state.isPaused);\n    return notifyManager.batch(() => Promise.all(pausedMutations.map(mutation => mutation.continue().catch(noop))));\n  }\n};\nfunction scopeFor(mutation) {\n  return mutation.options.scope?.id ?? String(mutation.mutationId);\n}\nexport { MutationCache };","map":{"version":3,"mappings":"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","names":["notifyManager","Mutation","matchMutation","noop","Subscribable","MutationCache","constructor","config","Map","Date","now","build","client","options","state","mutation","mutationCache","mutationId","defaultMutationOptions","add","scope","scopeFor","mutations","get","push","set","notify","type","remove","has","filter","x","length","delete","canRun","firstPendingMutation","find","m","status","runNext","foundMutation","isPaused","continue","Promise","resolve","clear","batch","getAll","forEach","values","flat","filters","defaultedFilters","exact","findAll","event","listeners","listener","resumePausedMutations","pausedMutations","all","map","catch","id","String"],"sources":["C:\\Users\\Razeen Ali\\499_capstone\\imageUpload\\react-node-s3-image-upload\\frontend\\node_modules\\@tanstack\\query-core\\src\\mutationCache.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Mutation } from './mutation'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\nimport type { MutationObserver } from './mutationObserver'\nimport type { DefaultError, MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Action, MutationState } from './mutation'\nimport type { MutationFilters } from './utils'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: DefaultError,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\nexport type MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  #mutations: Map<string, Array<Mutation<any, any, any, any>>>\n  #mutationId: number\n\n  constructor(public config: MutationCacheConfig = {}) {\n    super()\n    this.#mutations = new Map()\n    this.#mutationId = Date.now()\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    const scope = scopeFor(mutation)\n    const mutations = this.#mutations.get(scope) ?? []\n    mutations.push(mutation)\n    this.#mutations.set(scope, mutations)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    const scope = scopeFor(mutation)\n    if (this.#mutations.has(scope)) {\n      const mutations = this.#mutations\n        .get(scope)\n        ?.filter((x) => x !== mutation)\n      if (mutations) {\n        if (mutations.length === 0) {\n          this.#mutations.delete(scope)\n        } else {\n          this.#mutations.set(scope, mutations)\n        }\n      }\n    }\n\n    this.notify({ type: 'removed', mutation })\n  }\n\n  canRun(mutation: Mutation<any, any, any, any>): boolean {\n    const firstPendingMutation = this.#mutations\n      .get(scopeFor(mutation))\n      ?.find((m) => m.state.status === 'pending')\n\n    // we can run if there is no current pending mutation (start use-case)\n    // or if WE are the first pending mutation (continue use-case)\n    return !firstPendingMutation || firstPendingMutation === mutation\n  }\n\n  runNext(mutation: Mutation<any, any, any, any>): Promise<unknown> {\n    const foundMutation = this.#mutations\n      .get(scopeFor(mutation))\n      ?.find((m) => m !== mutation && m.state.isPaused)\n\n    return foundMutation?.continue() ?? Promise.resolve()\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Array<Mutation> {\n    return [...this.#mutations.values()].flat()\n  }\n\n  find<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = any,\n    TContext = unknown,\n  >(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((mutation) =>\n      matchMutation(defaultedFilters, mutation),\n    ) as Mutation<TData, TError, TVariables, TContext> | undefined\n  }\n\n  findAll(filters: MutationFilters = {}): Array<Mutation> {\n    return this.getAll().filter((mutation) => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    const pausedMutations = this.getAll().filter((x) => x.state.isPaused)\n\n    return notifyManager.batch(() =>\n      Promise.all(\n        pausedMutations.map((mutation) => mutation.continue().catch(noop)),\n      ),\n    )\n  }\n}\n\nfunction scopeFor(mutation: Mutation<any, any, any, any>) {\n  return mutation.options.scope?.id ?? String(mutation.mutationId)\n}\n"]},"metadata":{},"sourceType":"module"}