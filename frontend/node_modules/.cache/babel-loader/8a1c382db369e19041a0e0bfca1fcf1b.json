{"ast":null,"code":"// src/queryObserver.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { fetchState } from \"./query.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport { isServer, isValidTimeout, noop, replaceData, resolveEnabled, resolveStaleTime, shallowEqualObjects, timeUntilStale } from \"./utils.js\";\nvar QueryObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.options = options;\n    this.#client = client;\n    this.#selectError = null;\n    this.#currentThenable = pendingThenable();\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(new Error(\"experimental_prefetchInRender feature flag is not enabled\"));\n    }\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  #client;\n  #currentQuery = void 0;\n  #currentQueryInitialState = void 0;\n  #currentResult = void 0;\n  #currentResultState;\n  #currentResultOptions;\n  #currentThenable;\n  #selectError;\n  #selectFn;\n  #selectResult;\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData;\n  #staleTimeoutId;\n  #refetchIntervalId;\n  #currentRefetchInterval;\n  #trackedProps = /* @__PURE__ */new Set();\n  bindMethods() {\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch();\n      } else {\n        this.updateResult();\n      }\n      this.#updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.#currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.#currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    this.#clearStaleTimeout();\n    this.#clearRefetchInterval();\n    this.#currentQuery.removeObserver(this);\n  }\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.#currentQuery;\n    this.options = this.#client.defaultQueryOptions(options);\n    if (this.options.enabled !== void 0 && typeof this.options.enabled !== \"boolean\" && typeof this.options.enabled !== \"function\" && typeof resolveEnabled(this.options.enabled, this.#currentQuery) !== \"boolean\") {\n      throw new Error(\"Expected enabled to be a boolean or a callback that returns a boolean\");\n    }\n    this.#updateQuery();\n    this.#currentQuery.setOptions(this.options);\n    if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getQueryCache().notify({\n        type: \"observerOptionsUpdated\",\n        query: this.#currentQuery,\n        observer: this\n      });\n    }\n    const mounted = this.hasListeners();\n    if (mounted && shouldFetchOptionally(this.#currentQuery, prevQuery, this.options, prevOptions)) {\n      this.#executeFetch();\n    }\n    this.updateResult(notifyOptions);\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || resolveStaleTime(this.options.staleTime, this.#currentQuery) !== resolveStaleTime(prevOptions.staleTime, this.#currentQuery))) {\n      this.#updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.#computeRefetchInterval();\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || nextRefetchInterval !== this.#currentRefetchInterval)) {\n      this.#updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.#client.getQueryCache().build(this.#client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      this.#currentResult = result;\n      this.#currentResultOptions = this.options;\n      this.#currentResultState = this.#currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  trackResult(result, onPropTracked) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackProp(key);\n          onPropTracked?.(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n  trackProp(key) {\n    this.#trackedProps.add(key);\n  }\n  getCurrentQuery() {\n    return this.#currentQuery;\n  }\n  refetch() {\n    let {\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.fetch({\n      ...options\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.#client.defaultQueryOptions(options);\n    const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true\n    }).then(() => {\n      this.updateResult();\n      return this.#currentResult;\n    });\n  }\n  #executeFetch(fetchOptions) {\n    this.#updateQuery();\n    let promise = this.#currentQuery.fetch(this.options, fetchOptions);\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  #updateStaleTimeout() {\n    this.#clearStaleTimeout();\n    const staleTime = resolveStaleTime(this.options.staleTime, this.#currentQuery);\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime);\n    const timeout = time + 1;\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  #computeRefetchInterval() {\n    return (typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;\n  }\n  #updateRefetchInterval(nextInterval) {\n    this.#clearRefetchInterval();\n    this.#currentRefetchInterval = nextInterval;\n    if (isServer || resolveEnabled(this.options.enabled, this.#currentQuery) === false || !isValidTimeout(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {\n      return;\n    }\n    this.#refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.#executeFetch();\n      }\n    }, this.#currentRefetchInterval);\n  }\n  #updateTimers() {\n    this.#updateStaleTimeout();\n    this.#updateRefetchInterval(this.#computeRefetchInterval());\n  }\n  #clearStaleTimeout() {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId);\n      this.#staleTimeoutId = void 0;\n    }\n  }\n  #clearRefetchInterval() {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId);\n      this.#refetchIntervalId = void 0;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.#currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.#currentResult;\n    const prevResultState = this.#currentResultState;\n    const prevResultOptions = this.#currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;\n    const {\n      state\n    } = query;\n    let newState = {\n      ...state\n    };\n    let isPlaceholderData = false;\n    let data;\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options)\n        };\n      }\n      if (options._optimisticResults === \"isRestoring\") {\n        newState.fetchStatus = \"idle\";\n      }\n    }\n    let {\n      error,\n      errorUpdatedAt,\n      status\n    } = newState;\n    if (options.select && newState.data !== void 0) {\n      if (prevResult && newState.data === prevResultState?.data && options.select === this.#selectFn) {\n        data = this.#selectResult;\n      } else {\n        try {\n          this.#selectFn = options.select;\n          data = options.select(newState.data);\n          data = replaceData(prevResult?.data, data, options);\n          this.#selectResult = data;\n          this.#selectError = null;\n        } catch (selectError) {\n          this.#selectError = selectError;\n        }\n      }\n    } else {\n      data = newState.data;\n    }\n    if (options.placeholderData !== void 0 && data === void 0 && status === \"pending\") {\n      let placeholderData;\n      if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData(this.#lastQueryWithDefinedData?.state.data, this.#lastQueryWithDefinedData) : options.placeholderData;\n        if (options.select && placeholderData !== void 0) {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.#selectError = null;\n          } catch (selectError) {\n            this.#selectError = selectError;\n          }\n        }\n      }\n      if (placeholderData !== void 0) {\n        status = \"success\";\n        data = replaceData(prevResult?.data, placeholderData, options);\n        isPlaceholderData = true;\n      }\n    }\n    if (this.#selectError) {\n      error = this.#selectError;\n      data = this.#selectResult;\n      errorUpdatedAt = Date.now();\n      status = \"error\";\n    }\n    const isFetching = newState.fetchStatus === \"fetching\";\n    const isPending = status === \"pending\";\n    const isError = status === \"error\";\n    const isLoading = isPending && isFetching;\n    const hasData = data !== void 0;\n    const result = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === \"success\",\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === \"paused\",\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable\n    };\n    const nextResult = result;\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = thenable => {\n        if (nextResult.status === \"error\") {\n          thenable.reject(nextResult.error);\n        } else if (nextResult.data !== void 0) {\n          thenable.resolve(nextResult.data);\n        }\n      };\n      const recreateThenable = () => {\n        const pending = this.#currentThenable = nextResult.promise = pendingThenable();\n        finalizeThenableIfPossible(pending);\n      };\n      const prevThenable = this.#currentThenable;\n      switch (prevThenable.status) {\n        case \"pending\":\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable);\n          }\n          break;\n        case \"fulfilled\":\n          if (nextResult.status === \"error\" || nextResult.data !== prevThenable.value) {\n            recreateThenable();\n          }\n          break;\n        case \"rejected\":\n          if (nextResult.status !== \"error\" || nextResult.error !== prevThenable.reason) {\n            recreateThenable();\n          }\n          break;\n      }\n    }\n    return nextResult;\n  }\n  updateResult(notifyOptions) {\n    const prevResult = this.#currentResult;\n    const nextResult = this.createResult(this.#currentQuery, this.options);\n    this.#currentResultState = this.#currentQuery.state;\n    this.#currentResultOptions = this.options;\n    if (this.#currentResultState.data !== void 0) {\n      this.#lastQueryWithDefinedData = this.#currentQuery;\n    }\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.#currentResult = nextResult;\n    const defaultNotifyOptions = {};\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const {\n        notifyOnChangeProps\n      } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.#trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(notifyOnChangePropsValue ?? this.#trackedProps);\n      if (this.options.throwOnError) {\n        includedProps.add(\"error\");\n      }\n      return Object.keys(this.#currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n    this.#notify({\n      ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n  #updateQuery() {\n    const query = this.#client.getQueryCache().build(this.#client, this.options);\n    if (query === this.#currentQuery) {\n      return;\n    }\n    const prevQuery = this.#currentQuery;\n    this.#currentQuery = query;\n    this.#currentQueryInitialState = query.state;\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate() {\n    this.updateResult();\n    if (this.hasListeners()) {\n      this.#updateTimers();\n    }\n  }\n  #notify(notifyOptions) {\n    notifyManager.batch(() => {\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.#currentResult);\n        });\n      }\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: \"observerResultsUpdated\"\n      });\n    });\n  }\n};\nfunction shouldLoadOnMount(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (resolveEnabled(options.enabled, query) !== false) {\n    const value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport { QueryObserver };","map":{"version":3,"mappings":"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","names":["focusManager","notifyManager","fetchState","Subscribable","pendingThenable","isServer","isValidTimeout","noop","replaceData","resolveEnabled","resolveStaleTime","shallowEqualObjects","timeUntilStale","QueryObserver","constructor","client","options","experimental_prefetchInRender","reject","Error","bindMethods","setOptions","Set","refetch","bind","onSubscribe","listeners","size","addObserver","shouldFetchOnMount","updateResult","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","enabled","_defaulted","getQueryCache","notify","type","query","observer","mounted","shouldFetchOptionally","staleTime","nextRefetchInterval","getOptimisticResult","build","result","createResult","shouldAssignObserverCurrentProperties","state","getCurrentResult","trackResult","onPropTracked","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","trackProp","add","getCurrentQuery","fetch","fetchOptimistic","defaultedOptions","then","fetchOptions","cancelRefetch","promise","throwOnError","catch","isStale","time","dataUpdatedAt","timeout","setTimeout","refetchInterval","nextInterval","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","newState","isPlaceholderData","data","_optimisticResults","fetchOnMount","fetchOptionally","fetchStatus","error","errorUpdatedAt","status","select","selectError","placeholderData","Date","now","isFetching","isPending","isError","isLoading","hasData","isSuccess","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","finalizeThenableIfPossible","thenable","resolve","recreateThenable","pending","prevThenable","queryHash","value","reason","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","some","typedKey","changed","has","onQueryUpdate","batch","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","suspense","isStaleByTime","optimisticResult"],"sources":["C:\\Users\\Razeen Ali\\499_capstone\\imageUpload\\react-node-s3-image-upload\\frontend\\node_modules\\@tanstack\\query-core\\src\\queryObserver.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  listeners?: boolean\n}\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error('experimental_prefetchInRender feature flag is not enabled'),\n      )\n    }\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackProp(key as keyof QueryObserverResult)\n          onPropTracked?.(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Select data if needed\n    if (options.select && newState.data !== undefined) {\n      // Memoize select result\n      if (\n        prevResult &&\n        newState.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(newState.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = newState.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && placeholderData !== undefined) {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = {}\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (resolveEnabled(options.enabled, query) !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"]},"metadata":{},"sourceType":"module"}